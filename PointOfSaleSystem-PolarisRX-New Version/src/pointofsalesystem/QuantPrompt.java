/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pointofsalesystem;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.krysalis.barcode4j.HumanReadablePlacement;
import org.krysalis.barcode4j.impl.code128.Code128Bean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;
import org.krysalis.barcode4j.tools.UnitConv;
import static pointofsalesystem.POSController.CashierLabel;
import static pointofsalesystem.POSController.CustomerLabel;
import static pointofsalesystem.POSController.DateLabel;
import static pointofsalesystem.POSController.TimeLabel;
import static pointofsalesystem.POSController.background;
import static pointofsalesystem.POSController.psrvc;

/**
 *
 * @author pswor
 */
public class QuantPrompt extends javax.swing.JFrame {

    public String code;
    public String prodName;
    public String price;
    int quantity;

    /**
     * Creates new form QuantPrompt
     */
    public QuantPrompt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Quantity = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(400, 150));
        setMinimumSize(new java.awt.Dimension(400, 150));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Barcode Printing");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pointofsalesystem/Icons/Pincode Keyboard_32px.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, -1, -1));

        Quantity.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Quantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Quantity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityActionPerformed(evt);
            }
        });
        Quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                QuantityKeyTyped(evt);
            }
        });
        jPanel1.add(Quantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 170, 40));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Void Sales");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Please enter quantity to print and hit ENTER");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void printOutputReciept() {
        BufferedImage barcodeImage;
        try {
            PrinterJob pj = PrinterJob.getPrinterJob();
            barcodeImage = createBarcode2Print(new Code128Bean(), code);
            if (pj.printDialog()) {
                PageFormat pf = pj.defaultPage();
                Paper paper = pf.getPaper();
                paper.setSize(pf.getWidth(), pf.getHeight()); //Last values are 0.5
                pf.setOrientation(PageFormat.PORTRAIT);
                pf.setPaper(paper);
                PageFormat validatePage = pj.validatePage(pf);
                //                System.out.println("Valid- " + dump(validatePage));
                pj.setPrintable(new BarcodePrintable(barcodeImage), validatePage);
                try {
                    pj.setPrintService(psrvc);
                } catch (PrinterException ex) {
                    Logger.getLogger(LowStocks.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    for (int a = 0; a < quantity; a++) {
                        pj.print();
                    }

                } catch (PrinterException ex) {
                    Logger.getLogger(QuantPrompt.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(QuantPrompt.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public PageFormat getPageFormat(PrinterJob pj) {

        PageFormat pf = pj.defaultPage();
        Paper paper = pf.getPaper();

        double middleHeight = 8.0;
        double headerHeight = 2.0;
        double footerHeight = 2.0;
        double width = convertCMToPPI(6);      //printer know only point per inch.default value is 72ppi
        double height = convertCMToPPI(headerHeight + middleHeight + footerHeight);
        paper.setSize(width, height);
        paper.setImageableArea(
                0,
                8,
                width,
                height - convertCMToPPI(1000)
        );   //define boarder size    after that print area width is about 180 points

        pf.setOrientation(PageFormat.PORTRAIT);           //select orientation portrait or landscape but for this time portrait
        pf.setPaper(paper);

        return pf;
    }

    protected static double convertCMToPPI(double cm) {
        return toPPI(cm * 0.393600787);
    }

    protected static double toPPI(double inch) {
        return inch * 72d;
    }

    public class BarcodePrintable implements Printable {

        private final BufferedImage barcodeImageNew;

        public BarcodePrintable(BufferedImage barcodeImage) {
            int newWidth = 84;
            int newHeight = 22;
            this.barcodeImageNew = barcodeImage;
        }

        @Override
        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
            int result = NO_SUCH_PAGE;
            if (pageIndex == 0) {

                Graphics2D g2d = (Graphics2D) graphics;
                double width = pageFormat.getImageableWidth();
                g2d.translate((int) pageFormat.getImageableX(), (int) pageFormat.getImageableY());
                try {
                    /*Draw Header*/
                    int y = 8;
                    int yShift = 28;
                    g2d.drawImage(barcodeImageNew, 2, y, null);
                    y += yShift;
                    g2d.setFont(new Font("Monospaced", Font.BOLD, 9));
                    g2d.drawString("" + code, 2, y);
                    y += yShift - 20;
                    g2d.drawString("" + prodName, 2, y);
                    y += yShift - 20;
                    g2d.drawString("" + price, 2, y);
                    y += yShift;
                    g2d.drawString("", 2, y);
                    y += yShift;
                    for (int row = 0; row < 2; row++) {
                    }
                } catch (NumberFormatException r) {
                    //JOptionPane.showMessageDialog(null, r);
                }
                result = PAGE_EXISTS;
            }
            return result;
        }

        private BufferedImage resizeImage(BufferedImage barcodeImage, int newWidth, int newHeight) {
            BufferedImage resizedImage = new BufferedImage(newWidth, newHeight, barcodeImage.getType());

            // Get the graphics context of the new image
            Graphics2D g2d = resizedImage.createGraphics();

            // Set rendering hints for better image quality
            g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            // Create an AffineTransform to scale the image
            AffineTransform transform = AffineTransform.getScaleInstance(
                    (double) newWidth / barcodeImage.getWidth(),
                    (double) newHeight / barcodeImage.getHeight());

            // Apply the transformation to the graphics context
            g2d.drawImage(barcodeImage, transform, null);

            // Dispose of the graphics context
            g2d.dispose();

            return resizedImage;
        }
    }

    public BufferedImage createBarcode2Print(Code128Bean bean, String barcodeValue) throws FileNotFoundException, IOException {
        final int dpi = 28;

        BufferedImage image = null;
        BitmapCanvasProvider canvas = null;

        if (barcodeValue == null) {
            barcodeValue = "";
        }

        bean.setModuleWidth(UnitConv.in2mm(0.03571));
        bean.doQuietZone(false);

        try {
            canvas = new BitmapCanvasProvider(dpi, BufferedImage.TYPE_BYTE_BINARY, false, 0);
            bean.setMsgPosition(HumanReadablePlacement.HRP_NONE);
            bean.generateBarcode(canvas, barcodeValue);
            BufferedImage bardcode = canvas.getBufferedImage();

            image = new BufferedImage(bardcode.getWidth(), bardcode.getHeight(), BufferedImage.TYPE_INT_ARGB_PRE);
            Graphics2D g2d = image.createGraphics();
            g2d.drawImage(bardcode, 0, 0, null);
            g2d.dispose();
        } finally {
            canvas.finish();
        }

        return image;
    }

    private void QuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityActionPerformed

        quantity = Integer.parseInt(Quantity.getText());
        if (Quantity.getText().isEmpty()) {
            quantity = 1;
        } else {
            quantity = Integer.parseInt(Quantity.getText());
            Quantity.setEditable(false);

            printOutputReciept();

        }
        Quantity.setEditable(true);
        Quantity.setText("");
        dispose();

    }//GEN-LAST:event_QuantityActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Quantity.setEchoChar((char) 0);
    }//GEN-LAST:event_formWindowOpened

    private void QuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QuantityKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0') || (caracter > '9'))) {
            evt.consume();
        }
    }//GEN-LAST:event_QuantityKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuantPrompt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuantPrompt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuantPrompt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuantPrompt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuantPrompt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField Quantity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
